---
const { token } = Astro.props;
---

<div class="consultations" data-token={token}></div>

<template id="event-template">
    <li
        class="link-card w-full bg-bg-secondary rounded-[30px] h-[220px] ] p-7.5 flex gap-2.5 flex-col userActions"
    >
        <h3 class="date mb-2.5"></h3>

        <div>
            <span>Время:</span>
            <span class="start-time"></span>-<span class="end-time"></span>
        </div>
    </li>
</template>

<script>
    function getDateAndTimeYaCalendar(text) {
        const arr = text.split(" ");
        const time = arr.pop();
        const date = arr.join(" ");
        return {
            date,
            time,
        };
    }

    async function getData(url) {
        try {
            const res = await fetch(url);
            if (!res.ok) {
                return null;
            }
            const data = await res.text();
            return data;
        } catch {
            return null;
        }
    }

    function appendError(parrent, errorMessage) {
        const message = document.createElement("p");
        message.innerText = errorMessage;
        parrent.appendChild(message);
    }

    const parser = new DOMParser();

    document.addEventListener("DOMContentLoaded", async () => {
        const consultationsList = document.querySelectorAll(".consultations");

        consultationsList.forEach(async (consultationElement) => {
            const token = (consultationElement as HTMLElement).dataset.token;

            const URL = `https://slavaver.space/api/consultation?private_token=${token}`;

            const eventsHTML = await getData(URL);

            if (!eventsHTML) {
                appendError(
                    consultationElement,
                    "Ошибка загрузки расписания. Попробуйте перезагрузить страницу."
                );
                return;
            }

            const eventList = document.createElement("ul");

            eventList.classList.add("grid");
            eventList.classList.add("grid-cols-1");
            eventList.classList.add("md:grid-cols-2");
            eventList.classList.add("gap-5");
            eventList.classList.add("w-full");

            const dom = parser.parseFromString(eventsHTML, "text/html");
            const template: HTMLTemplateElement | null =
                document.querySelector("#event-template");

            const listOfEvents = [
                ...dom.querySelectorAll("div.b-content-event"),
            ].slice(0, 5);

            listOfEvents.forEach((eventElement) => {
                const clone = template?.content.cloneNode(true);

                const place = document.createElement("span");
                const eventTitle = eventElement.querySelector("h1")?.innerText;
                if (eventTitle?.split(" ")[1].startsWith("Пр")) {
                    place.innerText = "Аудитория: " + eventTitle?.split(" ")[1];
                    (clone as HTMLElement)?.firstElementChild?.appendChild(
                        place
                    );
                }

                const eventStartTimeValue: HTMLElement | null =
                    eventElement.querySelector(".e-time span:nth-child(1)");

                const startTimeValue = eventStartTimeValue?.innerText;
                const { date, time: startTime } =
                    getDateAndTimeYaCalendar(startTimeValue);
                const cloneDate: HTMLElement | null = (
                    clone as HTMLElement
                )?.querySelector(".date");

                if (cloneDate) cloneDate.innerText = date;

                const startTimeElement: HTMLElement | null = (
                    clone as HTMLElement
                )?.querySelector(".start-time");

                if (startTimeElement) startTimeElement.innerText = startTime;

                const eventEndTimeValue: HTMLElement | null =
                    eventElement.querySelector(".e-time span:nth-child(2)");

                const endTimeValue = eventEndTimeValue?.innerText;
                const { time: endTime } =
                    getDateAndTimeYaCalendar(endTimeValue);

                const endTimeElement: HTMLElement | null = (
                    clone as HTMLElement
                )?.querySelector(".end-time");

                if (endTimeElement) endTimeElement.innerText = endTime;

                const eventLink: HTMLElement | null = (
                    clone as HTMLElement
                )?.querySelector(".e-description a");

                const linkTelemost = eventLink?.innerText;

                if (linkTelemost) {
                    const linkLabel = document.createElement("span");
                    const link = document.createElement("a");

                    link.classList.add("underline");
                    link.classList.add("text-text-tertiary");
                    link.href = linkTelemost;
                    linkLabel.innerText = "Онлайн: ";
                    link.innerText = "Ссылка на защиту";
                    (clone as Element)?.firstElementChild?.appendChild(
                        linkLabel
                    );
                    linkLabel.appendChild(link);
                }

                eventList.appendChild(clone);
            });

            consultationElement.append(eventList);
        });
    });
</script>
