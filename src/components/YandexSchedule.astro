---
const { token } = Astro.props;
---

<div class="consultations" data-token={token}>
    <ul
        class="skeleton-container grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5"
    >
        <li
            class="w-full bg-bg-secondary rounded-[30px] p-7.5 flex gap-2.5 flex-col"
        >
            <div class="skeleton-title"></div>
            <div class="skeleton-subtitle"></div>
            <div class="skeleton-subtitle"></div>
        </li>
        <li
            class="w-full bg-bg-secondary rounded-[30px] p-7.5 flex gap-2.5 flex-col"
        >
            <div class="skeleton-title"></div>
            <div class="skeleton-subtitle"></div>
            <div class="skeleton-subtitle"></div>
        </li>
        <li
            class="w-full bg-bg-secondary rounded-[30px] p-7.5 flex gap-2.5 flex-col"
        >
            <div class="skeleton-title"></div>
            <div class="skeleton-subtitle"></div>
            <div class="skeleton-subtitle"></div>
        </li>
        <li
            class="w-full bg-bg-secondary rounded-[30px] p-7.5 flex gap-2.5 flex-col"
        >
            <div class="skeleton-title"></div>
            <div class="skeleton-subtitle"></div>
            <div class="skeleton-subtitle"></div>
        </li>
        <li
            class="w-full bg-bg-secondary rounded-[30px] p-7.5 flex gap-2.5 flex-col"
        >
            <div class="skeleton-title"></div>
            <div class="skeleton-subtitle"></div>
            <div class="skeleton-subtitle"></div>
        </li>
        <li
            class="w-full bg-bg-secondary rounded-[30px] p-7.5 flex gap-2.5 flex-col"
        >
            <div class="skeleton-title"></div>
            <div class="skeleton-subtitle"></div>
            <div class="skeleton-subtitle"></div>
        </li>
    </ul>
</div>

<template id="event-template">
    <li
        class="link-card w-full bg-bg-secondary rounded-[30px] p-7.5 flex gap-2.5 flex-col"
    >
        <h3 class="date mb-2.5"></h3>
        <div class="">
            <span>Время:</span>
            <span class="start-time"></span>-
            <span class="end-time"></span>
        </div>
    </li>
</template>

<style scoped>
    .skeleton-title {
        height: 32px;
        border-radius: 5px;
        opacity: 0.5;
        background: linear-gradient(
            90deg,
            var(--color-bg-primary) 35%,
            var(--color-bg-accent-first) 50%,
            var(--color-bg-primary) 65%
        );
        background-size: 200% 100%;
        margin-bottom: 10px;
        animation: skeleton-loading 1s ease-in-out infinite;
    }

    .skeleton-subtitle {
        height: 30px;
        width: 50%;
        border-radius: 5px;
        opacity: 0.5;
        background-color: var(--color-bg-accent-first);
        background: linear-gradient(
            90deg,
            var(--color-bg-primary) 35%,
            var(--color-bg-accent-first) 50%,
            var(--color-bg-primary) 65%
        );
        background-size: 200% 100%;
        animation: skeleton-loading 1s ease-in-out infinite;
    }

    .skeleton-subtitle:nth-of-type(3) {
        width: 70%;
    }

    @keyframes skeleton-loading {
        0% {
            background-position-x: 150%;
        }
        100% {
            background-position-x: -50%;
        }
    }

    @media (max-width: 1200px) {
        .skeleton-subtitle {
            height: 27px;
        }
    }

    @media (max-width: 768px) {
        .skeleton-subtitle {
            height: 24px;
        }
    }
</style>

<script>
    interface DateTime {
        date: string;
        time: string;
    }

    function getDateAndTimeYaCalendar(text: string): DateTime {
        const parts = text.trim().split(" ");
        const time = parts.pop() ?? "";
        const date = parts.join(" ");
        return { date, time };
    }

    async function fetchData(url: string): Promise<string | null> {
        try {
            const res = await fetch(url);
            if (!res.ok) return null;
            return await res.text();
        } catch {
            return null;
        }
    }

    function appendErrorMessage(parent: HTMLElement, message: string): void {
        const p = document.createElement("p");
        p.textContent = message;
        parent.appendChild(p);
    }

    function renderEvent(
        eventElement: Element,
        template: HTMLTemplateElement
    ): HTMLElement {
        const clone = template.content.cloneNode(true) as HTMLElement;
        const eventTitle = eventElement.querySelector("h1")?.textContent || "";
        const titleParts = eventTitle.split(" ");
        if (titleParts.length > 1 && titleParts[1].startsWith("Пр")) {
            const roomInfo = document.createElement("span");
            roomInfo.textContent = "Аудитория: " + titleParts[1];
            clone.firstElementChild?.appendChild(roomInfo);
        }
        const startSpan = eventElement.querySelector(
            ".e-time span:nth-child(1)"
        ) as HTMLElement | null;
        if (startSpan) {
            const { date, time: startTime } = getDateAndTimeYaCalendar(
                startSpan.textContent || ""
            );
            const dateEl = clone.querySelector(".date") as HTMLElement | null;
            if (dateEl) dateEl.textContent = date;
            const startTimeEl = clone.querySelector(
                ".start-time"
            ) as HTMLElement | null;
            if (startTimeEl) startTimeEl.textContent = startTime;
        }
        const endSpan = eventElement.querySelector(
            ".e-time span:nth-child(2)"
        ) as HTMLElement | null;
        if (endSpan) {
            const { time: endTime } = getDateAndTimeYaCalendar(
                endSpan.textContent || ""
            );
            const endTimeEl = clone.querySelector(
                ".end-time"
            ) as HTMLElement | null;
            if (endTimeEl) endTimeEl.textContent = endTime;
        }
        const linkAnchor = eventElement.querySelector(
            ".e-description a"
        ) as HTMLAnchorElement | null;
        if (linkAnchor && linkAnchor.textContent) {
            const linkLabel = document.createElement("span");
            linkLabel.textContent = "Онлайн: ";
            const link = document.createElement("a");
            link.classList.add("underline", "text-text-number");
            link.href = linkAnchor.textContent;
            link.textContent = "Ссылка на защиту";
            linkLabel.appendChild(link);
            clone.firstElementChild?.appendChild(linkLabel);
        }
        return clone;
    }

    async function processConsultation(element: HTMLElement): Promise<void> {
        const token = element.dataset.token;
        if (!token) {
            appendErrorMessage(element, "Ошибка: отсутствует токен.");
            return;
        }

        const URL = `https://slavaver.space/api/consultation?private_token=${token}`;
        const eventsHTML = await fetchData(URL);
        if (!eventsHTML) {
            appendErrorMessage(
                element,
                "Ошибка загрузки расписания. Попробуйте перезагрузить страницу."
            );
            return;
        }

        const eventList = document.createElement("ul");
        eventList.classList.add(
            "grid",
            "grid-cols-1",
            "sm:grid-cols-2",
            "lg:grid-cols-3",
            "gap-5",
            "w-full"
        );

        const parser = new DOMParser();
        const dom = parser.parseFromString(eventsHTML, "text/html");
        const template = document.querySelector(
            "#event-template"
        ) as HTMLTemplateElement | null;
        if (!template) {
            console.error("Event template not found in the document.");
            return;
        }

        const events = Array.from(
            dom.querySelectorAll("div.b-content-event")
        ).slice(0, 5);
        events.forEach((eventElement) => {
            const eventItem = renderEvent(eventElement, template);
            eventList.appendChild(eventItem);
        });

        const skeleton = element.querySelector(".skeleton-container");
        if (skeleton) skeleton.remove();

        element.appendChild(eventList);
    }

    document.addEventListener("DOMContentLoaded", () => {
        const consultations = document.querySelectorAll(".consultations");
        consultations.forEach((consultation) => {
            processConsultation(consultation as HTMLElement);
        });
    });
</script>
